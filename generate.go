package vfsgen

import (
	"bufio"
	"compress/gzip"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	pathpkg "path"
	"sort"

	"github.com/shurcooL/go/vfs/httpfs/vfsutil"
)

// Generate reads assets from an input directory, converts them
// to Go code and writes new files to the output specified
// in the given configuration.
func Generate(c Config) error {
	// Ensure our configuration has sane values.
	err := c.validate()
	if err != nil {
		return err
	}

	// Locate all the assets.
	var toc []pathAsset
	err = findFiles(c.Input, &toc)
	if err != nil {
		return err
	}

	// Create output file.
	f, err := os.Create(c.Output)
	if err != nil {
		return err
	}
	defer f.Close()

	// Create a buffered writer for better performance.
	buf := bufio.NewWriter(f)
	defer buf.Flush()

	// Write generated disclaimer.
	_, err = io.WriteString(buf, "// Generated by vfsgen; do not edit.\n\n")
	if err != nil {
		return err
	}

	// Write build tags, if applicable.
	if c.Tags != "" {
		_, err = fmt.Fprintf(buf, "// +build %s\n\n", c.Tags)
		if err != nil {
			return err
		}
	}

	// Write package declaration.
	_, err = fmt.Fprintf(buf, "package %s\n\n", c.Package)
	if err != nil {
		return err
	}

	// Write assets.
	err = writeAssets(buf, c, toc)
	if err != nil {
		return err
	}

	// Write virtual file system.
	err = writeVFS(buf)
	if err != nil {
		return err
	}

	return nil
}

// readDirPaths reads the directory named by dirname and returns
// a sorted list of directory paths.
func readDirPaths(fs http.FileSystem, dirname string) ([]string, error) {
	fis, err := vfsutil.ReadDir(fs, dirname)
	if err != nil {
		return nil, err
	}
	paths := make([]string, len(fis))
	for i := range fis {
		paths[i] = pathpkg.Join(dirname, fis[i].Name())
	}
	sort.Strings(paths)
	return paths, nil
}

// findFiles recursively finds all the file paths in the given directory tree.
// They are added to the given map as keys. Values will be safe function names
// for each file, which will be used when generating the output code.
func findFiles(fs http.FileSystem, toc *[]pathAsset) error {
	walkFn := func(path string, fi os.FileInfo, err error) error {
		if err != nil {
			log.Printf("can't stat file %s: %v\n", path, err)
			return nil
		}

		switch {
		case fi.IsDir():
			entries, err := readDirPaths(fs, path)
			if err != nil {
				return err
			}

			*toc = append(*toc, pathAsset{
				path: path,
				asset: &dirInfo{
					name:    pathpkg.Base(path),
					entries: entries,
					modTime: fi.ModTime(),
				},
			})

		case !fi.IsDir():
			*toc = append(*toc, pathAsset{
				path: path,
				asset: &fileInfo{
					name:             pathpkg.Base(path),
					uncompressedSize: fi.Size(),
					modTime:          fi.ModTime(),
				},
			})
		}

		return nil
	}

	err := vfsutil.Walk(fs, "/", walkFn)
	if err != nil {
		return err
	}

	return nil
}

type pathAsset struct {
	path  string
	asset interface{}
}

// THINK: Will this work? Can't do it with an io.Writer, need Seeker/Truncater or what?
// func tryCompressedFile(w io.Writer,

// writeAssets writes the code file.
func writeAssets(w io.Writer, c Config, toc []pathAsset) error {
	_, err := io.WriteString(w, `import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"time"
)

`)
	if err != nil {
		return err
	}

	_, err = fmt.Fprintf(w, `// %s statically implements the virtual filesystem given to vfsgen as input.
var %s = func() http.FileSystem {
	mustUnmarshalTextTime := func(text string) time.Time {
		var t time.Time
		err := t.UnmarshalText([]byte(text))
		if err != nil {
			panic(err)
		}
		return t
	}

	fs := _vfsgen_fs{
`, c.OutputName, c.OutputName)
	if err != nil {
		return err
	}

	for _, pathAsset := range toc {
		switch asset := pathAsset.asset.(type) {
		case *dirInfo:
			_, err = fmt.Fprintf(w, "\t\t%q: &_vfsgen_dirInfo{\n", pathAsset.path)
			if err != nil {
				return err
			}
			fmt.Fprintf(w, "\t\t\tname:    %q,\n", asset.name)
			modTimeBytes, err := asset.modTime.MarshalText()
			if err != nil {
				return err
			}
			fmt.Fprintf(w, "\t\t\tmodTime: mustUnmarshalTextTime(%q),\n", string(modTimeBytes))
			fmt.Fprintf(w, "\t\t},\n")
		case *fileInfo:
			_, err = fmt.Fprintf(w, "\t\t%q: &_vfsgen_compressedFileInfo{\n", pathAsset.path)
			if err != nil {
				return err
			}
			fmt.Fprintf(w, "\t\t\tname:              %q,\n", asset.name)
			fmt.Fprintf(w, "\t\t\tcompressedContent: []byte(\"")
			f, _ := c.Input.Open(pathAsset.path)
			sw := &stringWriter{Writer: w}
			gz := gzip.NewWriter(sw)
			_, _ = io.Copy(gz, f)
			_ = gz.Close()
			_ = f.Close()
			fmt.Fprintf(w, "\"),\n")
			fmt.Fprintf(w, "\t\t\tuncompressedSize:  %d,\n", asset.uncompressedSize)
			//fmt.Fprintf(w, "\t\t\t// compressedSize: %d,\n", sw.c)
			modTimeBytes, err := asset.modTime.MarshalText()
			if err != nil {
				return err
			}
			fmt.Fprintf(w, "\t\t\tmodTime:           mustUnmarshalTextTime(%q),\n", string(modTimeBytes))
			fmt.Fprintf(w, "\t\t},\n")
		}
	}

	_, err = fmt.Fprintf(w, "\t}\n\n")
	if err != nil {
		return err
	}

	for _, pathAsset := range toc {
		switch asset := pathAsset.asset.(type) {
		case *dirInfo:
			switch len(asset.entries) {
			case 0:
				fmt.Fprintf(w, "\tfs[%q].(*_vfsgen_dirInfo).entries = []os.FileInfo{} // Not nil.\n", pathAsset.path)
			default:
				fmt.Fprintf(w, "\tfs[%q].(*_vfsgen_dirInfo).entries = []os.FileInfo{\n", pathAsset.path)
				for _, entry := range asset.entries {
					fmt.Fprintf(w, "\t\tfs[%q].(os.FileInfo),\n", entry)
				}
				fmt.Fprintf(w, "\t}\n")
			}
		}
	}

	_, err = fmt.Fprintf(w, "\n\treturn fs\n}()\n")
	if err != nil {
		return err
	}

	return nil
}

func writeVFS(w io.Writer) error {
	_, err := io.WriteString(w, `
type _vfsgen_fs map[string]interface{}

func (fs _vfsgen_fs) Open(path string) (http.File, error) {
	// TODO: Maybe clean path?
	f, ok := fs[path]
	if !ok {
		return nil, os.ErrNotExist
	}

	switch f := f.(type) {
	case *_vfsgen_compressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &_vfsgen_compressedFile{
			_vfsgen_compressedFileInfo: f,
			gr: gr,
		}, nil
	case *_vfsgen_dirInfo:
		return &_vfsgen_dir{
			_vfsgen_dirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// _vfsgen_compressedFileInfo is a static definition of a gzip compressed file.
type _vfsgen_compressedFileInfo struct {
	name              string
	compressedContent []byte
	uncompressedSize  int64
	modTime           time.Time
}

func (f *_vfsgen_compressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *_vfsgen_compressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *_vfsgen_compressedFileInfo) GzipBytes() []byte {
	log.Println("using GzipBytes for", f.name)
	return f.compressedContent
}

func (f *_vfsgen_compressedFileInfo) Name() string       { return f.name }
func (f *_vfsgen_compressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *_vfsgen_compressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *_vfsgen_compressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *_vfsgen_compressedFileInfo) IsDir() bool        { return false }
func (f *_vfsgen_compressedFileInfo) Sys() interface{}   { return nil }

// _vfsgen_compressedFile is an opened compressedFile instance.
type _vfsgen_compressedFile struct {
	*_vfsgen_compressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *_vfsgen_compressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f._vfsgen_compressedFileInfo.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.ReadFull(f.gr, make([]byte, f.seekPos-f.grPos))
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos += int64(n)
	return n, err
}
func (f *_vfsgen_compressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case os.SEEK_SET:
		f.seekPos = 0 + offset
	case os.SEEK_CUR:
		f.seekPos += offset
	case os.SEEK_END:
		f.seekPos = f._vfsgen_compressedFileInfo.uncompressedSize + offset
	}
	return f.seekPos, nil
}
func (f *_vfsgen_compressedFile) Close() error {
	return f.gr.Close()
}

// _vfsgen_dirInfo is a static definition of a directory.
type _vfsgen_dirInfo struct {
	name    string
	entries []os.FileInfo // Not nil.
	modTime time.Time
}

func (d *_vfsgen_dirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *_vfsgen_dirInfo) Close() error               { return nil }
func (d *_vfsgen_dirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *_vfsgen_dirInfo) Name() string       { return d.name }
func (d *_vfsgen_dirInfo) Size() int64        { return 0 }
func (d *_vfsgen_dirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *_vfsgen_dirInfo) ModTime() time.Time { return d.modTime }
func (d *_vfsgen_dirInfo) IsDir() bool        { return true }
func (d *_vfsgen_dirInfo) Sys() interface{}   { return nil }

// _vfsgen_dir is an opened dir instance.
type _vfsgen_dir struct {
	*_vfsgen_dirInfo
	pending []os.FileInfo
}

func (d *_vfsgen_dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == os.SEEK_SET {
		d.pending = nil
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d._vfsgen_dirInfo.name)
}

func (d *_vfsgen_dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pending == nil {
		d.pending = d._vfsgen_dirInfo.entries
	}

	if len(d.pending) == 0 && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.pending) {
		count = len(d.pending)
	}
	e := d.pending[:count]
	d.pending = d.pending[count:]
	return e, nil
}
`)
	return err
}
